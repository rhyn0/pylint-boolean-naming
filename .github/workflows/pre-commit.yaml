name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  KEY_PREFIX: base-env
  PRE_COMMIT_CACHE: ~/.cache/pre-commit
  DEFAULT_PYTHON: "3.11"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  setup-env:
    name: setup-env
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      python-key: ${{ steps.generate-python-key.outputs.key }}
      pre-commit-key: ${{ steps.generate-pre-commit-key.outputs.key }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.1.0

      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v4.7.1
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          check-latest: true

      - name: Create Python virtual environment
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: false
          installer-parallel: true

      - name: Generate Python cache key
        id: generate-python-key
        run: >-
          echo "key=python-${{ steps.python.outputs.python-version }}-${{
            hashFiles('**/poetry.lock') }}" >> $GITHUB_OUTPUT

      - name: Restore Python virtual environment
        id: cache-venv
        uses: actions/cache@v3.3.2
        with:
          path: venv
          key: ${{ runner.os }}-${{ steps.generate-python-key.outputs.key }}

      - name: Install Python dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with dev

      - name: Generate pre-commit restore key
        id: generate-pre-commit-key
        run: >-
          echo "key=pre-commit-${{
            hashFiles('.pre-commit-config.yaml') }}" >> $GITHUB_OUTPUT

      - name: Restore pre-commit environment
        id: cache-precommit
        uses: actions/cache@v3.3.2
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          key: >-
            ${{ runner.os }}-${{ steps.generate-pre-commit-key.outputs.key }}

      - name: Install pre-commit dependencies
        if: steps.cache-precommit.outputs.cache-hit != 'true'
        run: |
          poetry run pre-commit install --install-hooks
  pylint:
    name: pylint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: setup-env
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.1.0

      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v4.7.1
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          check-latest: true

      - name: Restore Python virtual environment
        id: cache-venv
        uses: actions/cache@v3.3.2
        with:
          path: venv
          fail-on-cache-miss: true
          key: ${{ runner.os }}-${{ steps.generate-python-key.outputs.key }}

      - name: Install Python dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with dev

      - name: Restore pre-commit environment
        id: cache-precommit
        uses: actions/cache@v3.3.2
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          fail-on-cache-miss: true
          key: >-
            ${{ runner.os }}-${{ steps.generate-pre-commit-key.outputs.key }}

      - name: Run pylint checks
        run: |
          poetry run pre-commit run --hook-stage manual --all-files
